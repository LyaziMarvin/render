const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const axios = require('axios');
const neo4j = require('neo4j-driver');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Set up Neo4j driver (configure your credentials)
const driver = neo4j.driver('bolt://localhost:7687', neo4j.auth.basic('neo4j', 'password'));
const session = driver.session();

// Cohere API key and endpoint
const COHERE_API_KEY = '9StJFlYibvYlkScu4P2PXOYTl5xEr4Ye6L70mwc3';
const COHERE_API_URL = 'https://api.cohere.ai/generate';

// Secret key for JWT (keep this secret and secure)
const JWT_SECRET = 'your_jwt_secret_key';

// User registration
app.post('/api/register', async (req, res) => {
  const { email, password, age, gender } = req.body;
  
  // Hash password before storing
  const hashedPassword = await bcrypt.hash(password, 10);

  try {
    const createUserQuery = `
      CREATE (p:Person {email: $email, password: $password, age: $age, gender: $gender})
      RETURN p
    `;
    const result = await session.run(createUserQuery, { email, password: hashedPassword, age, gender });

    res.status(201).json({ message: 'User registered successfully!' });
  } catch (error) {
    console.error('Error during registration:', error);
    res.status(500).json({ error: 'Failed to register user' });
  }
});

// User login
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    // Fetch user by email
    const userQuery = `
      MATCH (p:Person {email: $email})
      RETURN p
    `;
    const result = await session.run(userQuery, { email });
    const user = result.records[0]?.get('p');

    if (!user) {
      return res.status(400).json({ error: 'User not found' });
    }

    // Compare passwords
    const isMatch = await bcrypt.compare(password, user.properties.password);
    if (!isMatch) {
      return res.status(400).json({ error: 'Invalid password' });
    }

    // Generate JWT token
    const token = jwt.sign({ userID: email }, JWT_SECRET, { expiresIn: '1h' });

    res.status(200).json({ message: 'Login successful', token });
  } catch (error) {
    console.error('Error during login:', error);
    res.status(500).json({ error: 'Failed to login' });
  }
});

// Score submission
app.post('/api/submit-scores', async (req, res) => {
  const { token, scores } = req.body;

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userID = decoded.userID;

    // Insert scores for the logged-in user
    const insertScoresQuery = `
      MATCH (p:Person {email: $userID})
      CREATE (r:Results {socialization: $socialization, learning: $learning, exercise: $exercise, diet: $diet, stress: $stress, sleep: $sleep})
      MERGE (p)-[:HAS_RESULTS]->(r)
      RETURN r
    `;
    
    await session.run(insertScoresQuery, {
      userID,
      socialization: scores.socialization,
      learning: scores.learning,
      exercise: scores.exercise,
      diet: scores.diet,
      stress: scores.stress,
      sleep: scores.sleep
    });

    res.status(200).json({ message: 'Scores submitted successfully!' });
  } catch (error) {
    console.error('Error during score submission:', error);
    res.status(500).json({ error: 'Failed to submit scores' });
  }
});

// AI Advice Generation
app.post('/api/generate-advice', async (req, res) => {
  const { token, prompt, scores } = req.body;

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userID = decoded.userID;

    // Get meanings based on scores
    const meanings = {
      socialization: getMeaning(scores.socialization),
      learning: getMeaning(scores.learning),
      exercise: getMeaning(scores.exercise),
      diet: getMeaning(scores.diet),
      stress: getMeaning(scores.stress),
      sleep: getMeaning(scores.sleep),
    };

    // Combine prompt with user's scores and meanings
    const combinedPrompt = `
      User's health data:
      Socialization: ${meanings.socialization} (${scores.socialization})
      Learning: ${meanings.learning} (${scores.learning})
      Exercise: ${meanings.exercise} (${scores.exercise})
      Diet: ${meanings.diet} (${scores.diet})
      Stress: ${meanings.stress} (${scores.stress})
      Sleep: ${meanings.sleep} (${scores.sleep})
      
      User's health-related question:
      ${prompt}
    `;

    // Send combined data to Cohere API
    const response = await axios.post(COHERE_API_URL, {
      prompt: combinedPrompt,
      model: 'xlarge', // Choose the model size based on your needs
      max_tokens: 300, // Adjust max tokens as needed
    }, {
      headers: {
        'Authorization': `Bearer ${COHERE_API_KEY}`,
      },
    });

    const advice = response.data.text.trim();

    // Save the generated advice in Neo4j
    const createAdviceQuery = `
      MATCH (p:Person {email: $userID})
      CREATE (a:Advice {advice: $advice})
      MERGE (p)-[:HAS_ADVICE]->(a)
      RETURN a
    `;
    
    await session.run(createAdviceQuery, { userID, advice });

    res.status(200).json({ advice });
  } catch (error) {
    console.error('Error generating advice:', error);
    res.status(500).json({ error: 'Failed to generate advice' });
  }
});

// Utility function to get meaning based on score
function getMeaning(score) {
  if (score >= 0 && score <= 3) return 'Low';
  if (score >= 4 && score <= 6) return 'Moderate';
  if (score >= 7 && score <= 10) return 'High';
  return 'Unknown';
}

// Start the server
const PORT = process.env.PORT || 5009;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
